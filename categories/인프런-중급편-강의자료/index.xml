<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>인프런 중급편 강의자료 on KubeTM Blog with Kubernetes</title>
    <link>https://kubetm.github.io/categories/%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%A4%91%EA%B8%89%ED%8E%B8-%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C/</link>
    <description>Recent content in 인프런 중급편 강의자료 on KubeTM Blog with Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 26 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kubetm.github.io/categories/%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%A4%91%EA%B8%89%ED%8E%B8-%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Dashboard</title>
      <link>https://kubetm.github.io/practice/intermediate/object-dashboard/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-dashboard/</guid>
      <description>1. Dashboard 2.0.0 설치   1-1) Dashboard 설치 kubetm 가이드로 Dashboard(1.10.1)를 설치했을 경우 아래 명령으로 삭제
kubectl delete -f https://raw.githubusercontent.com/kubetm/kubetm.github.io/master/sample/practice/appendix/gcp-kubernetes-dashboard.yaml 새 Dashboard (2.0.0) 설치 - https://github.com/kubernetes/dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml 1-2) ClusterRoleBinding 생성 cat &amp;lt;&amp;lt;EOF | kubectl create -f - apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard2 labels: k8s-app: kubernetes-dashboard roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: kubernetes-dashboard namespace: kubernetes-dashboard EOF 1-3) Token 확인 kubectl -n kubernetes-dashboard get secret kubernetes-dashboard-token- \-o jsonpath=&amp;#39;{.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://kubetm.github.io/practice/intermediate/object-authentication/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-authentication/</guid>
      <description>1. X509 Client Certs   1-1) kubeconfig 인증서 확인 Path : /etc/kubernetes/admin.conf
cluster.certificate-authority-data : CA.crt (Base64) user.client-certificate-data: Client.crt (Base64) user.client-key-data: Client.key (Base64) grep &amp;#39;client-certificate-data&amp;#39; /etc/kubernetes/admin.conf | head -n 1 | awk &amp;#39;{print $2}&amp;#39; | base64 -d grep &amp;#39;client-key-data&amp;#39; /etc/kubernetes/admin.conf | head -n 1 | awk &amp;#39;{print $2}&amp;#39; | base64 -d 1-2) Https API (Client.crt, Client.key) case1) postman
https://192.168.0.30:6443/api/v1/nodes Settings &amp;gt; General &amp;gt; SSL certificate verification &amp;gt; OFF Settings &amp;gt; Certificates &amp;gt; Client Certificates &amp;gt; Host, CRT file, KEY file case2) curl</description>
    </item>
    
    <item>
      <title>Authorization</title>
      <link>https://kubetm.github.io/practice/intermediate/object-authorization/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-authorization/</guid>
      <description>1. 자신의 Namespace 내에 Pod들만 조회할 수 있는 권한   1-1) Role apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: r-01 namespace: nm-01 rules: - apiGroups: [&amp;#34;&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;list&amp;#34;] resources: [&amp;#34;pods&amp;#34;] 1-2) RoleBinding apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: rb-01 namespace: nm-01 roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: r-01 subjects: - kind: ServiceAccount name: default namespace: nm-01 1-3) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: app: pod ports: - port: 8080 targetPort: 8080 1-4) Https API 호출 (Token) case1) postman</description>
    </item>
    
    <item>
      <title>AutoScaler - HPA</title>
      <link>https://kubetm.github.io/practice/intermediate/controller-autoscaler_hpa/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/controller-autoscaler_hpa/</guid>
      <description>1. Metrics Server 설치  1-1) Metrics Server 다운 및 설치 설치
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml  spec: containers:
 args:  &amp;ndash;cert-dir=/tmp &amp;ndash;secure-port=4443 &amp;ndash;kubelet-insecure-tls &amp;ndash;kubelet-preferred-address-types=InternalIP image: k8s.gcr.io/metrics-server-amd64:v0.3.6 imagePullPolicy: IfNotPresent name: metrics-server     &amp;lt;br/&amp;gt;설치 확인 (True값 확인)```shkubectl get apiservices |egrep metrics------------------------v1beta1.metrics.k8s.io kube-system/metrics-server True 28m------------------------kubectl top node ------------------------ NAME CPU(cores) CPU% MEMORY(bytes) MEMORY% k8s-master 485m 9% 4852Mi 32% k8s-node1 413m 8% 4929Mi 33% k8s-node2 554m 11% 4672Mi 31% ------------------------  2.</description>
    </item>
    
    <item>
      <title>Pod - Node Scheduling</title>
      <link>https://kubetm.github.io/practice/intermediate/pod-node_scheduling/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/pod-node_scheduling/</guid>
      <description>1. Node Affinity   1-1) Node Labeling kubectl label nodes k8s-node1 kr=az-1 kubectl label nodes k8s-node2 us=az-1 1-2) MatchExpressions apiVersion: v1 kind: Pod metadata: name: pod-match-expressions1 spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - {key: kr, operator: Exists} containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 0 1-3) Required apiVersion: v1 kind: Pod metadata: name: pod-required spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - {key: ch, operator: Exists} containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 0 1-4) Preferred apiVersion: v1 kind: Pod metadata: name: pod-preferred spec: affinity: nodeAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 1 preference: matchExpressions: - {key: ch, operator: Exists} containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 0  2.</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>https://kubetm.github.io/practice/intermediate/new-ingress/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/new-ingress/</guid>
      <description>1. Nginx Controller   1-1) Nginx 설치 kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.1/deploy/static/mandatory.yaml 1-2) NodePort Service 생성 kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.1/deploy/static/provider/baremetal/service-nodeport.yaml  2. Service Loadbalancing   2-1) Shopping Page apiVersion: v1 kind: Pod metadata: name: pod-shopping labels: category: shopping spec: containers: - name: container image: kubetm/shopping --- apiVersion: v1 kind: Service metadata: name: svc-shopping spec: selector: category: shopping ports: - port: 8080 2-2) Customer Center apiVersion: v1 kind: Pod metadata: name: pod-customer labels: category: customer spec: containers: - name: container image: kubetm/customer --- apiVersion: v1 kind: Service metadata: name: svc-customer spec: selector: category: customer ports: - port: 8080 2-3) Order Service apiVersion: v1 kind: Pod metadata: name: pod-order labels: category: order spec: containers: - name: container image: kubetm/order --- apiVersion: v1 kind: Service metadata: name: svc-order spec: selector: category: order ports: - port: 8080 2-4) Ingress apiVersion: networking.</description>
    </item>
    
    <item>
      <title>StatefulSet</title>
      <link>https://kubetm.github.io/practice/intermediate/new-statefulset/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/new-statefulset/</guid>
      <description>1. StatefulSet Controller   1-1) ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica-web spec: replicas: 1 selector: matchLabels: type: web template: metadata: labels: type: web spec: containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 10 1-2) StatefulSet apiVersion: apps/v1 kind: StatefulSet metadata: name: stateful-db spec: replicas: 1 selector: matchLabels: type: db template: metadata: labels: type: db spec: containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 10  2. PersistentVolumeClaim   2-1) PersistentVolumeClaim apiVersion: v1 kind: PersistentVolumeClaim metadata: name: replica-pvc1 spec: accessModes: - ReadWriteOnce resources: requests: storage: 1G storageClassName: &amp;#34;fast&amp;#34; 2-2) ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica-pvc spec: replicas: 1 selector: matchLabels: type: web2 template: metadata: labels: type: web2 spec: nodeSelector: kubernetes.</description>
    </item>
    
    <item>
      <title>Pod</title>
      <link>https://kubetm.github.io/practice/intermediate/pod-probe/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/pod-probe/</guid>
      <description>1. ReadinessProbe   1-1) Service apiVersion: v1 kind: Service metadata: name: svc-readiness spec: selector: app: readiness ports: - port: 8080 targetPort: 8080 1-2) Pod apiVersion: v1 kind: Pod metadata: name: pod1 labels: app: readiness  spec: containers: - name: container image: kubetm/app ports: - containerPort: 8080	terminationGracePeriodSeconds: 0 while true; do date &amp;amp;&amp;amp; curl 10.97.190.80:8080/hostname; sleep 1; done 1-3) Pod apiVersion: v1 kind: Pod metadata: name: pod-readiness-exec1 labels: app: readiness  spec: containers: - name: readiness image: kubetm/app ports: - containerPort: 8080	readinessProbe: exec: command: [&amp;#34;cat&amp;#34;, &amp;#34;/readiness/ready.</description>
    </item>
    
    <item>
      <title>Volume</title>
      <link>https://kubetm.github.io/practice/intermediate/object-volume/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-volume/</guid>
      <description>1. 사전 구성 - StorageOS 설치 및 StorageClass 생성   1-1) StorageOS Operator 설치 설치
kubectl apply -f https://github.com/storageos/cluster-operator/releases/download/1.5.0/storageos-operator.yaml 설치 확인
kubectl get all -n storageos-operator Depolyment 수정
kubectl edit deployments.apps storageos-cluster-operator -n storageos-operator spec.containers.env의 DISABLE_SCHEDULER_WEBHOOK의 Value를 true로 설정
spec: containers: - command: - cluster-operator env: - name: DISABLE_SCHEDULER_WEBHOOK value: &amp;#34;false&amp;#34; # true 로 변경 image: storageos/cluster-operator:1.5.0 imagePullPolicy: IfNotPresent 관리 계정을 위한 Secret 생성 (username 및 password를 Base64문자로 만들기)</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://kubetm.github.io/practice/intermediate/object-service/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-service/</guid>
      <description>Dns  Headless  Exteranl   Headless   1-1) Service apiVersion: v1 kind: Service metadata: name: clusterip1 spec: selector: svc: clusterip ports: - port: 80 targetPort: 8080 1-2) Pod apiVersion: v1 kind: Pod metadata: name: pod1 labels: svc: clusterip spec: containers: - name: container image: kubetm/app 1-3) Request Pod apiVersion: v1 kind: Pod metadata: name: request-pod spec: containers: - name: container image: kubetm/init kubectl exec request-pod -it /bin/bash nslookup</description>
    </item>
    
    <item>
      <title>[인프런] 강의 자료실</title>
      <link>https://kubetm.github.io/practice/backup/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/backup/</guid>
      <description>초급편 - 기초 다지기   Getting-Started Kubernetes!     초급편 - 쿠버네티스 설치   설치 - Case1 - 서버전용    설치 - Case2 - 내PC + VirtualBox    설치 - Case3 - 구글 클라우드 플랫폼     초급편 - 기본 오브젝트   Pod - Container, Label, NodeSchedule    Service - ClusterIP, NodePort, LoadBalancer    Volume - emptyDir, hostPath, PV/PVC    ConfigMap, Sercret - Env, Mount    Namespace, ResourceQuota, LimitRange     초급편 - 컨트롤러   Replication Controller, ReplicaSet - Template, Replicas, Selector Deployment - Recreate, RollingUpdate DaemonSet, Job, CronJob  중급편   Service - Headless, Endpoint, ExternalName    Volume - Dynamic Provisioning, StorageClass, Status, ReclaimPolicy     Pod - ReadinessProbe, LivenessProbe    StatefulSet - Pod, PersistentVolumeClaim, Headless Service    Ingress - Service Loadbalancing, Canary Upgrade    Node Scheduling - Node Affinity, Pod Affinity/Anti-Affinity, Toleration/Taint    Autoscaler - HPA, VPA, CA     </description>
    </item>
    
  </channel>
</rss>
