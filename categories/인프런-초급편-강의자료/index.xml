<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>인프런 초급편 강의자료 on KubeTM Blog with Kubernetes</title>
    <link>https://kubetm.github.io/categories/%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%B4%88%EA%B8%89%ED%8E%B8-%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C/</link>
    <description>Recent content in 인프런 초급편 강의자료 on KubeTM Blog with Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kubetm.github.io/categories/%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%B4%88%EA%B8%89%ED%8E%B8-%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Case 5. 내PC &#43; VirtualBox (Network: NatNetwork &#43; Port Forwarding)</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case5/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case5/</guid>
      <description>전체 네트워크 구성    1-1) Install Virtualbox  1-1-1) virtualbox 다운로드 및 설치 [윈도우10 버전으로 진행] 아래 경로에서 [Windows hosts] 클릭 하여 다운로드 후 설치 (별다른 변경없이 Next만 함)  https://www.virtualbox.org/wiki/Downloads
 Mac 사용자 참고 URL  https://www.virtualbox.org/wiki/Mac%20OS%20X%20build%20instructions
 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  http://isoredirect.centos.org/centos/7/isos/x86_64/
 꼭 MobaXterm이 아닌 각자 편한 원격접속 툴을 사용하셔도 되세요. 아래 예제는 MobaXterm를 설치하고 필요한 Host 등록 예제입니다.</description>
    </item>
    
    <item>
      <title>Case 5. 내PC &#43; VirtualBox (Network: NatNetwork &#43; Host-Only)</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case6/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case6/</guid>
      <description>전체 네트워크 구성    1-1) Install Virtualbox  1-1-1) virtualbox 다운로드 및 설치 [윈도우10 버전으로 진행] 아래 경로에서 [Windows hosts] 클릭 하여 다운로드 후 설치 (별다른 변경없이 Next만 함)  https://www.virtualbox.org/wiki/Downloads
 Mac 사용자 참고 URL  https://www.virtualbox.org/wiki/Mac%20OS%20X%20build%20instructions
 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  http://isoredirect.centos.org/centos/7/isos/x86_64/
 꼭 MobaXterm이 아닌 각자 편한 원격접속 툴을 사용하셔도 되세요. 아래 예제는 MobaXterm를 설치하고 필요한 Host 등록 예제입니다.</description>
    </item>
    
    <item>
      <title>Case 4. 내PC &#43; VirtualBox (Network: Bridge)</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case4/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case4/</guid>
      <description>1-1) Install Virtualbox  1-1-1) virtualbox 다운로드 및 설치 [윈도우10 버전으로 진행] 아래 경로에서 [Windows hosts] 클릭 하여 다운로드 후 설치 (별다른 변경없이 Next만 함)  https://www.virtualbox.org/wiki/Downloads
 Mac 사용자 참고 URL  https://www.virtualbox.org/wiki/Mac%20OS%20X%20build%20instructions
 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  http://isoredirect.centos.org/centos/7/isos/x86_64/
 꼭 MobaXterm이 아닌 각자 편한 원격접속 툴을 사용하셔도 되세요. 아래 예제는 MobaXterm를 설치하고 필요한 Host 등록 예제입니다.  https://mobaxterm.mobatek.net/
 - [GET MOBAXTERM NOW] 버튼 클릭 - Free 버전 [Download now] - Installer editon 다운로드 및 실행 - Sessions &amp;gt; SSH &amp;gt; Remote host : 192.</description>
    </item>
    
    <item>
      <title>Case 3. 구글 클라우드 플랫폼</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case3/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case3/</guid>
      <description>2020-06-13 자료실 내용 업데이트 되었습니다. 기본적으로 영상을 따라가시면서 하시되 상세한 설정 내용은 자료실 내용을 참고 하시면 되세요.   1-1) Join GCP  1-1-1) Join 아래 사이트에 들어가서 상단에 [무료로 시작하기] 버튼 클릭  https://cloud.google.com/
 1) Country : South Korea 2) Terms of Service : 체크 후 [CONTINUE] 3) 이름 및 주소 확인 후 Payment method 입력 자신의 신용카드 번호를 입력하지만 크레딧을 다 소모하거나 12개월이 지나도 자동으로 결재가 되진 않습니다.</description>
    </item>
    
    <item>
      <title>Case 2. 내PC &#43; VirtualBox</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case2/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case2/</guid>
      <description>1-1) Install Virtualbox  1-1-1) virtualbox 다운로드 및 설치 [윈도우10 버전으로 진행] 아래 경로에서 [Windows hosts] 클릭 하여 다운로드 후 설치 (별다른 변경없이 Next만 함)  https://www.virtualbox.org/wiki/Downloads
 Mac 사용자 참고 URL  https://www.virtualbox.org/wiki/Mac%20OS%20X%20build%20instructions
 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  http://isoredirect.centos.org/centos/7/isos/x86_64/
 꼭 MobaXterm이 아닌 각자 편한 원격접속 툴을 사용하셔도 되세요. 아래 예제는 MobaXterm를 설치하고 필요한 Host 등록 예제입니다.  https://mobaxterm.mobatek.net/
 - [GET MOBAXTERM NOW] 버튼 클릭 - Free 버전 [Download now] - Installer editon 다운로드 및 실행 - Sessions &amp;gt; SSH &amp;gt; Remote host : 192.</description>
    </item>
    
    <item>
      <title>Case 1. 서버전용</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case1/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case1/</guid>
      <description>1-1) Install CentOS  1-1-1) CentOS 다운로드 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  http://isoredirect.centos.org/centos/7/isos/x86_64/
 1-1-2) Booting USB 만들기 아래 경로로 들어가면 중간 정도에 다운로드 버튼 있어요.  https://rufus.ie/ko_KR.html 다운로드 후 실행
 - 장치 : USB 선택 - 부트 선택 : 디스크 또는 ISO 이미지 [선택] 클릭 후 다운받은 파일 지정 - [시작] 1-1-3) CentOS 설치 (실습 동영상 화면은 VM설치 화면으로 대체했지만 실제로는 아래와 같이 하시면 되세요) USB를 설치할 서버에 꼽고 부팅하면 CentOS 설치단계로 가져요 안되시는 분은 부팅 순서를 USB가 변경하셔야 됩니다.</description>
    </item>
    
    <item>
      <title>DaemonSet, Job, CronJob</title>
      <link>https://kubetm.github.io/practice/beginner/controller-daemonset_job_cronjob/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/controller-daemonset_job_cronjob/</guid>
      <description>1. DaemonSet   1-1) DaemonSet - HostPort apiVersion: apps/v1 kind: DaemonSet metadata: name: daemonset-1 spec: selector: matchLabels: type: app template: metadata: labels: type: app spec: containers: - name: container image: kubetm/app ports: - containerPort: 8080 hostPort: 18080 Command curl 192.168.0.31:18080/hostname 1-2) DaemonSet - NodeSelector apiVersion: apps/v1 kind: DaemonSet metadata: name: daemonset-2 spec: selector: matchLabels: type: app template: metadata: labels: type: app spec: nodeSelector: os: centos containers: - name: container image: kubetm/app ports: - containerPort: 8080 Kubectl Label Add</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://kubetm.github.io/practice/beginner/controller-deployment/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/controller-deployment/</guid>
      <description>1. ReCreate   1-1) Deployment apiVersion: apps/v1 kind: Deployment metadata: name: deployment-1 spec: selector: matchLabels: type: app replicas: 2 strategy: type: Recreate revisionHistoryLimit: 1 template: metadata: labels: type: app spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 10 1-2) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: type: app ports: - port: 8080 protocol: TCP targetPort: 8080 Command while true; do curl 10.99.5.3:8080/version; sleep 1; done Kubectl kubectl rollout undo deployment deployment-1 --to-revision=2 kubectl rollout history deployment deployment-1  2.</description>
    </item>
    
    <item>
      <title>Replication Controller, ReplicaSet</title>
      <link>https://kubetm.github.io/practice/beginner/controller-replicationcontroller_replicaset/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/controller-replicationcontroller_replicaset/</guid>
      <description>1. Template, Replicas   1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod1 labels: type: web spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 0 1-2) ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica1 spec: replicas: 1 selector: matchLabels: type: web template: metadata: name: pod1 labels: type: web spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 0  2. Updating Controller  ReplicationController -&amp;gt; ReplicaSet
ReplicationController apiVersion: v1 kind: ReplicationController metadata: name: replication1 spec: replicas: 2 selector: cascade: &amp;#34;false&amp;#34; template: metadata: labels: cascade: &amp;#34;false&amp;#34; spec: containers: - name: container image: kubetm/app:v1 kubectl kubectl delete replicationcontrollers replication1 --cascade=false ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica2 spec: replicas: 2 selector: matchLabels: cascade: &amp;#34;false&amp;#34; template: metadata: labels: cascade: &amp;#34;false&amp;#34; spec: containers: - name: container image: kubetm/app:v1  3.</description>
    </item>
    
    <item>
      <title>Namespace, ResourceQuota, LimitRange</title>
      <link>https://kubetm.github.io/practice/beginner/object-namespace_resourcequota_limitrange/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-namespace_resourcequota_limitrange/</guid>
      <description>1. Namespace   1-1) Namespace apiVersion: v1 kind: Namespace metadata: name: nm-1 1-2) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 namespace: nm-1 labels: app: pod spec: containers: - name: container image: kubetm/app ports: - containerPort: 8080 1-3) Service apiVersion: v1 kind: Service metadata: name: svc-1 namespace: nm-1 spec: selector: app: pod ports: - port: 9000 targetPort: 8080 1-1&#39;) Namespace apiVersion: v1 kind: Namespace metadata: name: nm-2 1-2&#39;) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 namespace: nm-2 labels: app: pod spec: containers: - name: container image: kubetm/init ports: - containerPort: 8080 pod ip :</description>
    </item>
    
    <item>
      <title>ConfigMap, Secret</title>
      <link>https://kubetm.github.io/practice/beginner/object-configmap_secret/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-configmap_secret/</guid>
      <description>1. Env (Literal)   1-1) ConfigMap apiVersion: v1 kind: ConfigMap metadata: name: cm-dev data: SSH: &amp;#39;false&amp;#39; User: dev 1-2) Secret apiVersion: v1 kind: Secret metadata: name: sec-dev data: Key: MTIzNA== 1-3) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 spec: containers: - name: container image: kubetm/init envFrom: - configMapRef: name: cm-dev - secretRef: name: sec-dev  2. Env (File)   2-1) Configmap echo &amp;#34;Content&amp;#34; &amp;gt;&amp;gt; file-c.txt kubectl create configmap cm-file --from-file=.</description>
    </item>
    
    <item>
      <title>Volume</title>
      <link>https://kubetm.github.io/practice/beginner/object-volume/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-volume/</guid>
      <description>1. emptyDir   1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-volume-1 spec: containers: - name: container1 image: kubetm/init volumeMounts: - name: empty-dir mountPath: /mount1 - name: container2 image: kubetm/init volumeMounts: - name: empty-dir mountPath: /mount2 volumes: - name : empty-dir emptyDir: {} mount | grep mount1 echo &amp;#34;file context&amp;#34; &amp;gt;&amp;gt; file.txt  2. hostPath   2-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-volume-3 spec: nodeSelector: kubernetes.</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://kubetm.github.io/practice/beginner/object-service/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-service/</guid>
      <description>1. ClusterIP   1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 labels: app: pod spec: nodeSelector: kubernetes.io/hostname: k8s-node1 containers: - name: container image: kubetm/app ports: - containerPort: 8080 1-2) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: app: pod ports: - port: 9000 targetPort: 8080 curl 10.104.103.107:9000/hostname  2. NodePort   Service apiVersion: v1 kind: Service metadata: name: svc-2 spec: selector: app: pod ports: - port: 9000 targetPort: 8080 nodePort: 30000 type: NodePort externalTrafficPolicy: Local  3.</description>
    </item>
    
    <item>
      <title>Pod</title>
      <link>https://kubetm.github.io/practice/beginner/object-pod/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-pod/</guid>
      <description>1. Container   1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 spec: containers: - name: container1 image: kubetm/p8000 ports: - containerPort: 8000 - name: container2 image: kubetm/p8080 ports: - containerPort: 8080 1-2) ReplicationController apiVersion: v1 kind: ReplicationController metadata: name: replication-1 spec: replicas: 1 selector: app: rc template: metadata: name: pod-1 labels: app: rc spec: containers: - name: container image: kubetm/init  2. Label   2-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-2 labels: type: web lo: dev spec: containers: - name: container image: kubetm/init 2-2) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: type: web ports: - port: 8080  3.</description>
    </item>
    
    <item>
      <title>Getting-started Kubernetes</title>
      <link>https://kubetm.github.io/practice/beginner/gettingstarted-kubernetes/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/gettingstarted-kubernetes/</guid>
      <description>이 실습 강의의 목적은 일반 서버와 도커, 그리고 쿠버네티스 환경의 차이점에 대해 대략적인 흐름을 이해하기 위함입니다. 그렇기 때문에 강의를 위한 별도의 사전 구축 내용들은 설명되지 않았고, 이후 쿠버네티스를 설치하고 [기초편]부터 실습을 진행하시면 되세요. 하지만 기존에 도커를 잘 아시는 분께서는 자신의 환경에 마춰 실습해 보셔도 무관합니다.
  1. Linux   1-1) hello.js var http = require(&amp;#39;http&amp;#39;); var content = function(req, resp) { resp.end(&amp;#34;Hello Kubernetes!&amp;#34; + &amp;#34;\n&amp;#34;); resp.writeHead(200); } var w = http.</description>
    </item>
    
  </channel>
</rss>
