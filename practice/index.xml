<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[인프런] 강의 자료실 on KubeTM Blog with Kubernetes</title>
    <link>https://kubetm.github.io/practice/</link>
    <description>Recent content in [인프런] 강의 자료실 on KubeTM Blog with Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kubetm.github.io/practice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Case 5. 내PC &#43; VirtualBox (Network: NatNetwork &#43; Host-Only)</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case5/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case5/</guid>
      <description>쿠버네티스 1.19 버전의 설치 방법으로써 설치시 영상 강의 UI와 약간의 차이가 있을 수 있습니다.  VM 생성시 노트북에 연결되어 있는 공유기로부터 IP를 할당 받을 수 없는 경우 Virtualbox로부터 VM끼리 통신할 수 있는 가상의 네트워크를 생성하는 방법입니다.  
전체 네트워크 구성   - NatNetwork : k8s-Master와 k8s-Node들간에 통신역할 및 인터넷으로부터 파일을 다운로드 받을 수 있게 해주는 역할  - VirtualBox Host-Only : 내 Host OS에서 각 Guest OS에 연결 할 수 있도록 해주는 역할</description>
    </item>
    
    <item>
      <title>Case 4. 내PC &#43; VirtualBox (Network: Bridge)</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case4/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case4/</guid>
      <description>쿠버네티스 1.19 버전의 설치 방법으로써 설치시 영상 강의 UI와 약간의 차이가 있을 수 있습니다.  VM 생성시 노트북에 연결되어 있는 공유기로부터 IP를 할당 받을 수 있을 경우의 설치 방법입니다.  
 1-1) Install Virtualbox 1-1-1) virtualbox 다운로드 및 설치 [윈도우10 버전으로 진행] 아래 경로에서 [Windows hosts] 클릭 하여 다운로드 후 설치 (별다른 변경없이 Next만 함)  &amp;gt;https://www.virtualbox.org/wiki/Downloads

Mac 사용자 참고 URL  &amp;gt;https://www.virtualbox.org/wiki/Mac%20OS%20X%20build%20instructions

1-1-2) CentOS Download 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  &amp;gt;http://isoredirect.</description>
    </item>
    
    <item>
      <title>Kubernetes Dashboard</title>
      <link>https://kubetm.github.io/practice/intermediate/object-dashboard/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-dashboard/</guid>
      <description>1. Dashboard 2.0.0 설치  
1-1) Dashboard 설치 kubetm 가이드로 Dashboard(1.10.1)를 설치했을 경우 아래 명령으로 삭제
kubectl delete -f https://raw.githubusercontent.com/kubetm/kubetm.github.io/master/sample/practice/appendix/gcp-kubernetes-dashboard.yaml  새 Dashboard (2.0.0) 설치 - https://github.com/kubernetes/dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml  
1-2) ClusterRoleBinding 생성 cat &amp;lt;&amp;lt;EOF | kubectl create -f - apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard2 labels: k8s-app: kubernetes-dashboard roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: kubernetes-dashboard namespace: kubernetes-dashboard EOF</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://kubetm.github.io/practice/intermediate/object-authentication/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-authentication/</guid>
      <description>1. X509 Client Certs  1-1) kubeconfig 인증서 확인 Path : /etc/kubernetes/admin.conf
cluster.certificate-authority-data : CA.crt (Base64) user.client-certificate-data: Client.crt (Base64) user.client-key-data: Client.key (Base64)  grep &#39;client-certificate-data&#39; /etc/kubernetes/admin.conf | head -n 1 | awk &#39;{print $2}&#39; | base64 -d grep &#39;client-key-data&#39; /etc/kubernetes/admin.conf | head -n 1 | awk &#39;{print $2}&#39; | base64 -d  
1-2) Https API (Client.crt, Client.key) case1) postman
https://192.168.0.30:6443/api/v1/nodes  Settings &amp;gt; General &amp;gt; SSL certificate verification &amp;gt; OFF Settings &amp;gt; Certificates &amp;gt; Client Certificates &amp;gt; Host, CRT file, KEY file  case2) curl</description>
    </item>
    
    <item>
      <title>Authorization</title>
      <link>https://kubetm.github.io/practice/intermediate/object-authorization/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-authorization/</guid>
      <description>1. 자신의 Namespace 내에 Pod들만 조회할 수 있는 권한  1-1) Role apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: r-01 namespace: nm-01 rules: - apiGroups: [&amp;quot;&amp;quot;] verbs: [&amp;quot;get&amp;quot;, &amp;quot;list&amp;quot;] resources: [&amp;quot;pods&amp;quot;]  1-2) RoleBinding apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: rb-01 namespace: nm-01 roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: r-01 subjects: - kind: ServiceAccount name: default namespace: nm-01  1-3) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: app: pod ports: - port: 8080 targetPort: 8080  1-4) Https API 호출 (Token) case1) postman</description>
    </item>
    
    <item>
      <title>CKA 자격증 개요</title>
      <link>https://kubetm.github.io/practice/cka/ready/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/cka/ready/</guid>
      <description>시험 접수 및 기본 정보 * 시험비 : 300불 재시험 기회 1번 포함  접수 : https://training.linuxfoundation.org/certification/certified-kubernetes-administrator-cka/ 할인 쿠폰 :
구글 검색에 [cka exam coupon code] 키워드로 검색하면 최소 30%는 찾을 수 있음 ex: KUBERNETES30, ANYWHERE30   
* 버전 : 꼭 버전 확인! 해당 내용은 1.17 기준 
* 시험시간 : 3시간 
* 시험문항 : 24문항 난이도에 따라 1점 ~ 9점, 모두 실습 형태</description>
    </item>
    
    <item>
      <title>AutoScaler - HPA</title>
      <link>https://kubetm.github.io/practice/intermediate/controller-autoscaler_hpa/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/controller-autoscaler_hpa/</guid>
      <description>1. Metrics Server 설치 1-1) Metrics Server 다운 및 설치 설치
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml   Metrics Deployment 수정 (args 에 kubelet-insecure-tls 와 kubelet-preferred-address-types=InternalIP 추가)
kubectl edit deployment metrics-server -n kube-system ------------------------ spec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls - --kubelet-preferred-address-types=InternalIP image: k8s.gcr.io/metrics-server-amd64:v0.3.6 imagePullPolicy: IfNotPresent name: metrics-server ------------------------   설치 확인 (True값 확인)
kubectl get apiservices |egrep metrics ------------------------ v1beta1.metrics.k8s.io kube-system/metrics-server True 28m ------------------------   메트릭 값 확인 (1~2분 후)</description>
    </item>
    
    <item>
      <title>Pod - Node Scheduling</title>
      <link>https://kubetm.github.io/practice/intermediate/pod-node_scheduling/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/pod-node_scheduling/</guid>
      <description>1. Node Affinity  1-1) Node Labeling kubectl label nodes k8s-node1 kr=az-1 kubectl label nodes k8s-node2 us=az-1  1-2) MatchExpressions apiVersion: v1 kind: Pod metadata: name: pod-match-expressions1 spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - {key: kr, operator: Exists} containers: - name: container image: tmkube/app terminationGracePeriodSeconds: 0  1-3) Required apiVersion: v1 kind: Pod metadata: name: pod-required spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - {key: ch, operator: Exists} containers: - name: container image: tmkube/app terminationGracePeriodSeconds: 0  1-4) Preferred apiVersion: v1 kind: Pod metadata: name: pod-preferred spec: affinity: nodeAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 1 preference: matchExpressions: - {key: ch, operator: Exists} containers: - name: container image: tmkube/app terminationGracePeriodSeconds: 0</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>https://kubetm.github.io/practice/intermediate/new-ingress/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/new-ingress/</guid>
      <description>1. Nginx Controller  1-1) Nginx 설치 kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.1/deploy/static/mandatory.yaml  1-2) NodePort Service 생성 kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.1/deploy/static/provider/baremetal/service-nodeport.yaml  
2. Service Loadbalancing  2-1) Shopping Page apiVersion: v1 kind: Pod metadata: name: pod-shopping labels: category: shopping spec: containers: - name: container image: kubetm/shopping --- apiVersion: v1 kind: Service metadata: name: svc-shopping spec: selector: category: shopping ports: - port: 8080  2-2) Customer Center apiVersion: v1 kind: Pod metadata: name: pod-customer labels: category: customer spec: containers: - name: container image: kubetm/customer --- apiVersion: v1 kind: Service metadata: name: svc-customer spec: selector: category: customer ports: - port: 8080  2-3) Order Service apiVersion: v1 kind: Pod metadata: name: pod-order labels: category: order spec: containers: - name: container image: kubetm/order --- apiVersion: v1 kind: Service metadata: name: svc-order spec: selector: category: order ports: - port: 8080  2-4) Ingress apiVersion: networking.</description>
    </item>
    
    <item>
      <title>StatefulSet</title>
      <link>https://kubetm.github.io/practice/intermediate/new-statefulset/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/new-statefulset/</guid>
      <description>1. StatefulSet Controller  1-1) ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica-web spec: replicas: 1 selector: matchLabels: type: web template: metadata: labels: type: web spec: containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 10  1-2) StatefulSet apiVersion: apps/v1 kind: StatefulSet metadata: name: stateful-db spec: replicas: 1 selector: matchLabels: type: db template: metadata: labels: type: db spec: containers: - name: container image: kubetm/app terminationGracePeriodSeconds: 10</description>
    </item>
    
    <item>
      <title>Pod</title>
      <link>https://kubetm.github.io/practice/intermediate/pod-probe/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/pod-probe/</guid>
      <description>1. ReadinessProbe  1-1) Service apiVersion: v1 kind: Service metadata: name: svc-readiness spec: selector: app: readiness ports: - port: 8080 targetPort: 8080  1-2) Pod apiVersion: v1 kind: Pod metadata: name: pod1 labels: app: readiness spec: containers: - name: container image: kubetm/app ports: - containerPort: 8080	terminationGracePeriodSeconds: 0  while true; do date &amp;amp;&amp;amp; curl 10.97.190.80:8080/hostname; sleep 1; done  1-3) Pod apiVersion: v1 kind: Pod metadata: name: pod-readiness-exec1 labels: app: readiness spec: containers: - name: readiness image: kubetm/app ports: - containerPort: 8080	readinessProbe: exec: command: [&amp;quot;cat&amp;quot;, &amp;quot;/readiness/ready.</description>
    </item>
    
    <item>
      <title>Volume</title>
      <link>https://kubetm.github.io/practice/intermediate/object-volume/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-volume/</guid>
      <description>1. 사전 구성 - StorageOS 설치 및 StorageClass 생성  1-1) StorageOS Operator 설치 설치
kubectl apply -f https://github.com/storageos/cluster-operator/releases/download/1.5.0/storageos-operator.yaml  설치 확인
kubectl get all -n storageos-operator  Depolyment 수정
kubectl edit deployments.apps storageos-cluster-operator -n storageos-operator  spec.containers.env의 DISABLE_SCHEDULER_WEBHOOK의 Value를 true로 설정
spec: containers: - command: - cluster-operator env: - name: DISABLE_SCHEDULER_WEBHOOK value: &amp;quot;false&amp;quot; # true 로 변경 image: storageos/cluster-operator:1.5.0 imagePullPolicy: IfNotPresent  관리 계정을 위한 Secret 생성 (username 및 password를 Base64문자로 만들기)</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://kubetm.github.io/practice/intermediate/object-service/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/intermediate/object-service/</guid>
      <description>Dns  Headless  Exteranl   
Headless  1-1) Service apiVersion: v1 kind: Service metadata: name: clusterip1 spec: selector: svc: clusterip ports: - port: 80 targetPort: 8080  1-2) Pod apiVersion: v1 kind: Pod metadata: name: pod1 labels: svc: clusterip spec: containers: - name: container image: kubetm/app  1-3) Request Pod apiVersion: v1 kind: Pod metadata: name: request-pod spec: containers: - name: container image: kubetm/init  kubectl exec request-pod -it /bin/bash  nslookup</description>
    </item>
    
    <item>
      <title>Case 3. 구글 클라우드 플랫폼</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case3/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case3/</guid>
      <description>2020-06-13 자료실 내용 업데이트 되었습니다. 기본적으로 영상을 따라가시면서 하시되 상세한 설정 내용은 자료실 내용을 참고 하시면 되세요.  
 1-1) Join GCP 1-1-1) Join 아래 사이트에 들어가서 상단에 [무료로 시작하기] 버튼 클릭  &amp;gt;https://cloud.google.com/

1) Country : South Korea 2) Terms of Service : 체크 후 [CONTINUE] 3) 이름 및 주소 확인 후 Payment method 입력  자신의 신용카드 번호를 입력하지만 크레딧을 다 소모하거나 12개월이 지나도 자동으로 결재가 되진 않습니다.</description>
    </item>
    
    <item>
      <title>Case 2. 내PC &#43; VirtualBox</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case2/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case2/</guid>
      <description>윈도우나 맥이 설치되어 있는 Desktop가 1대 있고, 그위에 VirtualBox와 같은 도구를 이용해서 VM을 만드는 경우   
 1-1) Install Virtualbox 1-1-1) virtualbox 다운로드 및 설치 [윈도우10 버전으로 진행] 아래 경로에서 [Windows hosts] 클릭 하여 다운로드 후 설치 (별다른 변경없이 Next만 함)  &amp;gt;https://www.virtualbox.org/wiki/Downloads

Mac 사용자 참고 URL  &amp;gt;https://www.virtualbox.org/wiki/Mac%20OS%20X%20build%20instructions

1-1-2) CentOS Download 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  &amp;gt;http://isoredirect.centos.org/centos/7/isos/x86_64/</description>
    </item>
    
    <item>
      <title>Case 1. 서버전용</title>
      <link>https://kubetm.github.io/practice/appendix/installation_case1/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/appendix/installation_case1/</guid>
      <description>남는 Server나 Netebook이 1대 있고, 그 서버 자체를 처음부터 구성하는 경우 그 서버의 CentOS 설치부터 가이드 시작..   
 1-1) Install CentOS 1-1-1) CentOS 다운로드 아래 경로로 들어가서 원하는 경로에서 Minimal 버전의 파일 다운로드  &amp;gt;http://isoredirect.centos.org/centos/7/isos/x86_64/
1-1-2) Booting USB 만들기 아래 경로로 들어가면 중간 정도에 다운로드 버튼 있어요.  &amp;gt;https://rufus.ie/ko_KR.html  다운로드 후 실행
- 장치 : USB 선택 - 부트 선택 : 디스크 또는 ISO 이미지 [선택] 클릭 후 다운받은 파일 지정 - [시작]  1-1-3) CentOS 설치 (실습 동영상 화면은 VM설치 화면으로 대체했지만 실제로는 아래와 같이 하시면 되세요)  USB를 설치할 서버에 꼽고 부팅하면 CentOS 설치단계로 가져요  안되시는 분은 부팅 순서를 USB가 변경하셔야 됩니다.</description>
    </item>
    
    <item>
      <title>DaemonSet, Job, CronJob</title>
      <link>https://kubetm.github.io/practice/beginner/controller-daemonset_job_cronjob/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/controller-daemonset_job_cronjob/</guid>
      <description>1-1) DaemonSet - HostPort DaemonSet apiVersion: apps/v1 kind: DaemonSet metadata: name: daemonset-1 spec: selector: matchLabels: type: app template: metadata: labels: type: app spec: containers: - name: container image: kubetm/app ports: - containerPort: 8080 hostPort: 18080  Command curl 192.168.0.31:18080/hostname  1-2) DaemonSet - NodeSelector DaemonSet apiVersion: apps/v1 kind: DaemonSet metadata: name: daemonset-2 spec: selector: matchLabels: type: app template: metadata: labels: type: app spec: nodeSelector: os: centos containers: - name: container image: kubetm/app ports: - containerPort: 8080  Kubectl Label Add</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://kubetm.github.io/practice/beginner/controller-deployment/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/controller-deployment/</guid>
      <description>1) ReCreate Deployment apiVersion: apps/v1 kind: Deployment metadata: name: deployment-1 spec: selector: matchLabels: type: app replicas: 2 strategy: type: Recreate revisionHistoryLimit: 1 template: metadata: labels: type: app spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 10  Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: type: app ports: - port: 8080 protocol: TCP targetPort: 8080  Command while true; do curl 10.99.5.3:8080/version; sleep 1; done  Kubectl kubectl rollout undo deployment deployment-1 --to-revision=2 kubectl rollout history deployment deployment-1  2) RollingUpdate Deployment apiVersion: apps/v1 kind: Deployment metadata: name: deployment-2 spec: selector: matchLabels: type: app2 replicas: 2 strategy: type: RollingUpdate minReadySeconds: 10 template: metadata: labels: type: app2 spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 0  Service apiVersion: v1 kind: Service metadata: name: svc-2 spec: selector: type: app2 ports: - port: 8080 protocol: TCP targetPort: 8080  Command while true; do curl 10.</description>
    </item>
    
    <item>
      <title>Replication Controller, ReplicaSet</title>
      <link>https://kubetm.github.io/practice/beginner/controller-replicationcontroller_replicaset/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/controller-replicationcontroller_replicaset/</guid>
      <description> 1) Template, Replicas Pod apiVersion: v1 kind: Pod metadata: name: pod1 labels: type: web spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 0  ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica1 spec: replicas: 1 selector: matchLabels: type: web template: metadata: name: pod1 labels: type: web spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 0  2) Updating Controller ReplicationController -&amp;gt; ReplicaSet
ReplicationController apiVersion: v1 kind: ReplicationController metadata: name: replication1 spec: replicas: 2 selector: cascade: &amp;quot;false&amp;quot; template: metadata: labels: cascade: &amp;quot;false&amp;quot; spec: containers: - name: container image: kubetm/app:v1  kubectl kubectl delete replicationcontrollers replication1 --cascade=false  ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica2 spec: replicas: 2 selector: matchLabels: cascade: &amp;quot;false&amp;quot; template: metadata: labels: cascade: &amp;quot;false&amp;quot; spec: containers: - name: container image: kubetm/app:v1  3) Selector ReplicaSet apiVersion: apps/v1 kind: ReplicaSet metadata: name: replica1 spec: replicas: 1 selector: matchLabels: type: web ver: v1 matchExpressions: - {key: type, operator: In, values: [web]} - {key: ver, operator: Exists} template: metadata: labels: type: web ver: v1 location: dev spec: containers: - name: container image: kubetm/app:v1 terminationGracePeriodSeconds: 0  Pod apiVersion: v1 kind: Pod metadata: name: pod-node-affinity1 spec: affinity: nodeAffinity: requiredDuringSchedulingIngnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - {key: AZ-01, operator: Exists} containers: - name: container image: kubetm/init  </description>
    </item>
    
    <item>
      <title>Namespace, ResourceQuota, LimitRange</title>
      <link>https://kubetm.github.io/practice/beginner/object-namespace_resourcequota_limitrange/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-namespace_resourcequota_limitrange/</guid>
      <description>1. Namespace  1-1) Namespace apiVersion: v1 kind: Namespace metadata: name: nm-1  1-2) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 namespace: nm-1 labels: app: pod spec: containers: - name: container image: kubetm/app ports: - containerPort: 8080  1-3) Service apiVersion: v1 kind: Service metadata: name: svc-1 namespace: nm-1 spec: selector: app: pod ports: - port: 9000 targetPort: 8080  pod ip :
curl 10.16.36.115:8080/hostname  service ip :</description>
    </item>
    
    <item>
      <title>ConfigMap, Secret</title>
      <link>https://kubetm.github.io/practice/beginner/object-configmap_secret/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-configmap_secret/</guid>
      <description>1. Env (Literal)  1-1) ConfigMap apiVersion: v1 kind: ConfigMap metadata: name: cm-dev data: SSH: &#39;false&#39; User: dev  1-2) Secret apiVersion: v1 kind: Secret metadata: name: sec-dev data: Key: MTIzNA==  1-3) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 spec: containers: - name: container image: kubetm/init envFrom: - configMapRef: name: cm-dev - secretRef: name: sec-dev   
2. Env (File)  2-1) Configmap echo &amp;quot;Content&amp;quot; &amp;gt;&amp;gt; file-c.</description>
    </item>
    
    <item>
      <title>Volume</title>
      <link>https://kubetm.github.io/practice/beginner/object-volume/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-volume/</guid>
      <description>1. emptyDir  1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-volume-1 spec: containers: - name: container1 image: kubetm/init volumeMounts: - name: empty-dir mountPath: /mount1 - name: container2 image: kubetm/init volumeMounts: - name: empty-dir mountPath: /mount2 volumes: - name : empty-dir emptyDir: {}  mount | grep mount1 echo &amp;quot;file context&amp;quot; &amp;gt;&amp;gt; file.txt   
2. hostPath  2-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-volume-3 spec: nodeSelector: kubernetes.</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://kubetm.github.io/practice/beginner/object-service/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-service/</guid>
      <description>1. ClusterIP  1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 labels: app: pod spec: nodeSelector: kubernetes.io/hostname: k8s-node1 containers: - name: container image: kubetm/app ports: - containerPort: 8080  1-2) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: app: pod ports: - port: 9000 targetPort: 8080  curl 10.104.103.107:9000/hostname   
2. NodePort  Service apiVersion: v1 kind: Service metadata: name: svc-2 spec: selector: app: pod ports: - port: 9000 targetPort: 8080 nodePort: 30000 type: NodePort externalTrafficPolicy: Local  3.</description>
    </item>
    
    <item>
      <title>Pod</title>
      <link>https://kubetm.github.io/practice/beginner/object-pod/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/object-pod/</guid>
      <description>1. Container  1-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-1 spec: containers: - name: container1 image: kubetm/p8000 ports: - containerPort: 8000 - name: container2 image: kubetm/p8080 ports: - containerPort: 8080  1-2) ReplicationController apiVersion: v1 kind: ReplicationController metadata: name: replication-1 spec: replicas: 1 selector: app: rc template: metadata: name: pod-1 labels: app: rc spec: containers: - name: container image: kubetm/init   
2. Label  2-1) Pod apiVersion: v1 kind: Pod metadata: name: pod-2 labels: type: web lo: dev spec: containers: - name: container image: kubetm/init  2-2) Service apiVersion: v1 kind: Service metadata: name: svc-1 spec: selector: type: web ports: - port: 8080</description>
    </item>
    
    <item>
      <title>Getting-started Kubernetes</title>
      <link>https://kubetm.github.io/practice/beginner/gettingstarted-kubernetes/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/beginner/gettingstarted-kubernetes/</guid>
      <description>1. Linux  1-1) hello.js var http = require(&#39;http&#39;); var content = function(req, resp) { resp.end(&amp;quot;Hello Kubernetes!&amp;quot; + &amp;quot;\n&amp;quot;); resp.writeHead(200); } var w = http.createServer(content); w.listen(8000);  node hello.js   
2. Docker  2-1) Dockerfile FROM node:slim EXPOSE 8000 COPY hello.js . CMD node hello.js  2-2) Docker Hub Site https://hub.docker.com/
2-3) Docker Container Run docker build -t kubetm/hello . -t : 레파지토리/이미지명:버전 docker images docker run -d -p 8100:8000 kubetm/hello -d : 백그라운드 모드 -p : 포트변경 docker ps docker exec -it c403442e8a59 /bin/bash  2-4) Docker Image Push docker login docker push kubetm/hello</description>
    </item>
    
    <item>
      <title>CKA 시험 공부 1</title>
      <link>https://kubetm.github.io/practice/cka/exam1-d394-fdkjfa-ackife/</link>
      <pubDate>Sun, 16 Apr 2000 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/cka/exam1-d394-fdkjfa-ackife/</guid>
      <description>사전 작업 node-1에 kubectl 명령 자동완성 설정
https://v1-18.docs.kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-autocomplete
source &amp;lt;(kubectl completion bash) echo &amp;quot;source &amp;lt;(kubectl completion bash)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc  alias k=kubectl complete -F __start_kubectl k   
k8s Cluster - 17문항 k8s cluster에서 작업하는 문제 (아래 명령어는 문제에서도 알려줌)
kubectl config use-context k8s   
Pod에서 특정 Error Log 문자열만 출력해서 파일 저장 사전환경
cat &amp;lt;&amp;lt;EOF | kubectl create -f - apiVersion: v1 kind: Pod metadata: name: poo spec: containers: - name: container image: kubetm/init command: [&#39;sh&#39;, &#39;-c&#39;, &#39;echo Hello Kubernetes ; echo error-message; echo end; sleep 1000&#39;] EOF  문제풀이</description>
    </item>
    
    <item>
      <title>CKA 시험 공부 2</title>
      <link>https://kubetm.github.io/practice/cka/exam2-d394-fdkjfa-ackife2/</link>
      <pubDate>Sun, 16 Apr 2000 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/cka/exam2-d394-fdkjfa-ackife2/</guid>
      <description>Node-1 별도 Cluster의 접근 없이 node-1에서 주어진 문제 풀이
Etcd 스냅샷을 하는데 TLS를 이용  Endpoint : https:127.0.0.1:2379 Path : /snapshot/etcd.db Version : 3.2.12 CA : /tls/ca.crt, Client Cert : /tls/client.crt, Client Key : /tls/client.key  문제풀이
https://v1-18.docs.kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#built-in-snapshot
ETCDCTL_API=3 etcdctl --endpoints https://127.0.0.1:2379 --cacert /tls/ca.crt --cert /tls/client.crt --key /tls/client.key snapshot save /snapshot/etcd.db ETCDCTL_API=3 etcdctl --write-out=table snapshot status /snapshot/etcd.db  내 Cluster에서 해볼려면..
cd /etc/kubernetes/pki/etcd 에 있는 ca.crt, server.crt, server.</description>
    </item>
    
    <item>
      <title>Networking Architecture</title>
      <link>https://kubetm.github.io/practice/architecture/networking-difm-diadf-9aa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/architecture/networking-difm-diadf-9aa/</guid>
      <description>1. Pod Network - Pause Container  1-1) Pause Container apiVersion: v1 kind: Pod metadata: name: pod-pause spec: nodeSelector: kubernetes.io/hostname: k8s-node1 containers: - name: container1 image: kubetm/p8000 ports: - containerPort: 8000 - name: container2 image: kubetm/p8080 ports: - containerPort: 8080  Pause Container 확인
docker ps | grep pod-pause  Pause Container 인터페이스 확인
docker ps | grep pod-pause docker inspect &amp;lt;container-id&amp;gt; -f &amp;quot;{{json .NetworkSettings}}&amp;quot; sudo ln -s /var/run/docker/netns /var/run/netns ip netns exec &amp;lt;SandboxKey&amp;gt; ip a</description>
    </item>
    
    <item>
      <title>Storage Architecture</title>
      <link>https://kubetm.github.io/practice/architecture/storage-difm-diadf-9aa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubetm.github.io/practice/architecture/storage-difm-diadf-9aa/</guid>
      <description>1. FTP Server 구축 1-1) NFS 패키지 다운 및 설치 설치
yum -y install nfs-utils rpcbind systemctl start rpcbind systemctl start nfs-server systemctl start rpc-statd systemctl enable rpcbind systemctl enable nfs-server  확인
systemctl status nfs-server  
1-2) 공유 폴더 생성 및 설정 공유 폴더 생성
mkdir /share-data chmod 777 /share-data  vi /etc/exports 로 아래 내용 입력 후 저장
/share-data *(rw,sync,no_root_squash)  반영
exportfs -r  방화벽 해제 및 NFS Server재시작</description>
    </item>
    
  </channel>
</rss>